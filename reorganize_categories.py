#!/usr/bin/env python3
"""
Reorganize cards from bloated 'general' category into proper categories
Based on user's intelligent mapping strategy
"""

import csv
import re

# Category mapping rules - Spanish phrase patterns ‚Üí new category tag
REORGANIZATION_RULES = {
    # INTIMATE (sexual/very intimate) ‚Üí intimate
    'intimate': [
        'hagamos el amor', 'acu√©state conmigo', 'me prendiste', 'me calienta',
        'me excita', 'quiero hacerte', 'te deseo', 'desnud', 'beso', 'besar'
    ],

    # ROMANCE & RELATIONSHIP (feelings, romantic, affection) ‚Üí romance
    'romance': [
        'te amo', 'te quiero', 'mi amor', 'mi vida', 'envejezcamos juntos',
        'eres mi debilidad', 'pienso en ti', 'te extra√±o', 'me gusta', 'hermosa',
        'hermoso', 'preciosa', 'precioso', 'cari√±o', 'amor de mi vida',
        'enamorad', 'coraz√≥n', 'contigo', 'aprecio', 'me importas',
        'te sientes bien', 'duerme rico', 'que tengas', 'cu√≠date'
    ],

    # SOCIAL LUBRICANTS (compliments, pleasantries, social grease) ‚Üí social
    'social': [
        'hablas muy bonito', 'qu√© bien', 's√∫per bien', 'bac√°n', 'ch√©vere',
        'de maravilla', 'qu√© chimba', 'qu√© rico', 'bien hecho', 'felicidades',
        'salud', 'buen provecho', 'gracias', 'disculpa', 'perd√≥n', 'qu√© pena',
        'con permiso', 'mucho gusto', 'un placer', 'igualmente'
    ],

    # TIME & PLANNING (coordinating, scheduling) ‚Üí time_planning
    'time_planning': [
        'a qu√© hora', 'cuando', 'd√≥nde nos vemos', 'te sirve', 'cuadramos',
        'nos vemos', 'quedamos', 'ya llegaste', 'ya llegu√©', 'av√≠same',
        'te recojo', 'paso por', 'ahorita', 'm√°s tarde', 'ah√≠ hablamos',
        'ma√±ana', 'hoy', 'ayer', 'antier', 'ratico', 'un momento',
        'ah√≠ vamos', 'ya voy', 'ya casi', 'voy saliendo', 'voy llegando'
    ],

    # REQUESTS & OFFERS (transactional, asking, offering) ‚Üí requests_offers
    'requests_offers': [
        'me ayudas', 'me colaboras', 'nos trae', 'aceptan tarjeta',
        'aceptan transferencia', 'tienes efectivo', 'junto o separado',
        'cu√°nto cuesta', 'cu√°nto vale', 'cu√°nto es', 'a c√≥mo est√°',
        'me prestas', 'me regalas', 'te sirvo', 'quieres', 'te ofrezco',
        'porfa', 'por favor', 'te invito', 'puedes', 'podr√≠as'
    ],

    # REACTIONS & EXCLAMATIONS ‚Üí reactions
    'reactions': [
        'qu√© va', 'ay dios', 'ay s√≠', 'ay no', 'uy', 'wow', '√©pale',
        'qu√© jartera', 'qu√© pereza', 'qu√© chimba', 'bac√°n', 'berraco',
        'obvio', 'claro', 'por supuesto', 'dale', 'listo', 'ya',
        'as√≠ est√° perfecto', 'as√≠ me gusta', 'bien o qu√©', 'normal',
        'tranqui', 'suave'
    ],

    # HEALTH & WELLNESS ‚Üí health
    'health': [
        'me duele', 'me siento', 'estoy enfermo', 'estoy cansad',
        'estoy agotad', 'tengo sue√±o', 'tengo hambre', 'tengo sed',
        'te sientes', 'c√≥mo sigues', 'est√°s bien', 'te mejoras',
        'descansa', 'cu√≠date', 'si te sientes mejor'
    ],

    # ACTIVITIES & GOING OUT ‚Üí activities
    'activities': [
        'vamos a rumbear', 'salimos', 'pasemos el rato', 'tomemos algo',
        'descansar es seguir la rumba', 'una pola', 'un tinto',
        'prefiero algo tranquilo', 'rumba', 'fiesta', 'parche',
        'nos tomamos', 'bailamos', 'comamos'
    ],

    # FOOD & DINING ‚Üí food (already exists)
    'food': [
        'almorzamos', 'almorzaste', 'almuerzo', 'desayuno', 'cena',
        'comes', 'comiste', 'hambre', 'algo suave o con alcohol',
        'buen provecho', 'qu√© quieres pedir', 'el plato del d√≠a',
        'nos trae', 'la cuenta', 'otro jugo', 'otra cerveza'
    ],

    # HELP & ASSISTANCE ‚Üí help (already exists)
    'help': [
        'me ayudas', 'me colaboras', 'ay√∫dame', 'colaborame',
        'necesito ayuda', 'me haces el favor', 'puedes ayudarme'
    ],

    # DIRECTIONS & LOCATION ‚Üí directions (already exists)
    'directions': [
        'al frente de', 'al lado de', 'en la esquina', 'para en',
        'cruzando', 'cu√°ntas cuadras', 'por ac√°', 'por all√°',
        'derecha', 'izquierda', 'recto', 'd√≥nde queda', 'c√≥mo llego'
    ],
}

def categorize_card(spanish_text):
    """Determine best category for a card based on its Spanish text"""
    text_lower = spanish_text.lower()

    # Check each category's patterns
    for category, patterns in REORGANIZATION_RULES.items():
        for pattern in patterns:
            if pattern in text_lower:
                return category

    return None  # Keep in general if no match

def reorganize_csv():
    """Apply reorganization to cards.csv"""

    # Read CSV
    rows = []
    with open('public/cards.csv', 'r', encoding='utf-8') as f:
        reader = csv.reader(f)
        header = next(reader)
        rows.append(header)

        for row in reader:
            rows.append(row)

    # Track changes
    moves = {}
    unchanged = 0

    # Process each row
    for i, row in enumerate(rows[1:], 1):  # Skip header
        if len(row) < 9:
            continue

        spanish = row[0]
        current_tags = row[7]

        # Only reorganize if currently tagged 'general'
        if 'general' not in current_tags:
            unchanged += 1
            continue

        # Determine new category
        new_category = categorize_card(spanish)

        if new_category:
            # Replace 'general' with new category in tags
            old_tags = current_tags
            new_tags = current_tags.replace('general', new_category)
            rows[i][7] = new_tags

            # Track for reporting
            if new_category not in moves:
                moves[new_category] = []
            moves[new_category].append(spanish[:60])

    # Write updated CSV
    with open('public/cards.csv', 'w', encoding='utf-8', newline='') as f:
        writer = csv.writer(f)
        writer.writerows(rows)

    # Report results
    print("="*80)
    print("CATEGORY REORGANIZATION COMPLETE")
    print("="*80)
    print()

    total_moved = sum(len(cards) for cards in moves.values())
    print(f"üìä Total cards moved: {total_moved}")
    print(f"üìå Cards unchanged: {unchanged}")
    print()

    for category in sorted(moves.keys()):
        cards = moves[category]
        print(f"\n‚úÖ {category.upper()} ({len(cards)} cards)")
        print("-" * 60)
        for card in cards[:5]:  # Show first 5
            print(f"   ‚Ä¢ {card}")
        if len(cards) > 5:
            print(f"   ... and {len(cards) - 5} more")

    print()
    print("="*80)
    print(f"‚úÖ Updated public/cards.csv")
    print("="*80)

if __name__ == '__main__':
    reorganize_csv()
